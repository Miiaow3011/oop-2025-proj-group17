import pygame
import sys
import time
from game_state import GameState
from map_manager import MapManager
from player import Player
from ui import UI
from combat import CombatSystem
from inventory import Inventory
from font_manager import font_manager

class Game:
    def __init__(self):
        pygame.init()
        
        # 檢查中文字體
        if not font_manager.install_chinese_font():
            print("警告: 中文字體可能無法正常顯示")
            print("建議將中文TTF字體檔案放入 assets/fonts/ 資料夾")
        
        # 遊戲設定
        self.SCREEN_WIDTH = 1024
        self.SCREEN_HEIGHT = 768
        self.FPS = 60
        
        # 初始化畫面
        self.screen = pygame.display.set_mode((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        pygame.display.set_caption("末世第二餐廳")
        self.clock = pygame.time.Clock()
        
        # 遊戲狀態
        self.game_state = GameState()
        
        # 初始化遊戲組件
        self.map_manager = MapManager()
        self.player = Player(x=400, y=300)  # 初始位置在7-11
        self.ui = UI(self.screen)
        self.combat_system = CombatSystem()
        self.inventory = Inventory()
        
        # 遊戲標誌
        self.running = True
        self.show_intro = True
        
        # 互動冷卻機制
        self.last_interaction_time = 0
        self.interaction_cooldown = 0.5  # 0.5秒冷卻時間
        
    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
                
            elif event.type == pygame.KEYDOWN:
                if self.show_intro:
                    if event.key == pygame.K_SPACE:
                        self.show_intro = False
                        
                elif self.game_state.current_state == "exploration":
                    self.handle_exploration_input(event)
                    
                elif self.game_state.current_state == "combat":
                    self.handle_combat_input(event)
                    
                elif self.game_state.current_state == "dialogue":
                    self.handle_dialogue_input(event)
                
                # 全域快捷鍵 (任何狀態都可用)
                if event.key == pygame.K_F1:
                    print(f"除錯: 當前狀態 = {self.game_state.current_state}")
                    print(f"除錯: 對話活躍 = {self.ui.dialogue_active}")
                    print(f"除錯: 玩家位置 = ({self.player.x}, {self.player.y})")
                elif event.key == pygame.K_F2:
                    # 強制恢復exploration狀態
                    self.force_exploration_state()
    
    def force_exploration_state(self):
        """強制恢復到exploration狀態"""
        print("🔧 強制恢復exploration狀態")
        self.game_state.current_state = "exploration"
        self.ui.dialogue_active = False
        self.ui.show_inventory = False
        self.ui.show_map = False
        print("✅ 狀態已恢復")
    
    def handle_exploration_input(self, event):
        if event.key == pygame.K_UP:
            self.player.move(0, -32)
        elif event.key == pygame.K_DOWN:
            self.player.move(0, 32)
        elif event.key == pygame.K_LEFT:
            self.player.move(-32, 0)
        elif event.key == pygame.K_RIGHT:
            self.player.move(32, 0)
        elif event.key == pygame.K_SPACE:
            self.interact()
        elif event.key == pygame.K_i:
            self.ui.toggle_inventory()
        elif event.key == pygame.K_m:
            self.ui.toggle_map()
    
    def handle_combat_input(self, event):
        if event.key == pygame.K_1:
            self.combat_system.player_action("attack")
        elif event.key == pygame.K_2:
            self.combat_system.player_action("defend")
        elif event.key == pygame.K_3:
            self.combat_system.player_action("escape")
    
    def handle_dialogue_input(self, event):
        if event.key == pygame.K_1 and len(self.ui.dialogue_options) >= 1:
            self.ui.select_dialogue_option(0)
            self.check_dialogue_end()
        elif event.key == pygame.K_2 and len(self.ui.dialogue_options) >= 2:
            self.ui.select_dialogue_option(1)
            self.check_dialogue_end()
        elif event.key == pygame.K_3 and len(self.ui.dialogue_options) >= 3:
            self.ui.select_dialogue_option(2)
            self.check_dialogue_end()
        elif event.key == pygame.K_SPACE:
            self.ui.continue_dialogue()
            self.check_dialogue_end()
        elif event.key == pygame.K_ESCAPE:
            # ESC鍵強制退出對話
            self.ui.dialogue_active = False
            self.game_state.current_state = "exploration"
    
    def check_dialogue_end(self):
        """檢查對話是否結束，恢復exploration狀態"""
        if not self.ui.dialogue_active:
            self.game_state.current_state = "exploration"
    
    def interact(self):
        # 檢查互動冷卻
        current_time = time.time()
        if current_time - self.last_interaction_time < self.interaction_cooldown:
            print(f"⏰ 互動冷卻中，請等待 {self.interaction_cooldown - (current_time - self.last_interaction_time):.1f} 秒")
            return
        
        # 檢查玩家附近是否有可互動物件
        current_floor = self.map_manager.get_current_floor()
        interaction = self.map_manager.check_interaction(
            self.player.x, self.player.y, current_floor
        )
        
        print(f"🔍 檢查互動: 樓層{current_floor}, 位置({self.player.x}, {self.player.y})")
        
        if interaction:
            print(f"✅ 找到互動物件: {interaction}")
            self.last_interaction_time = current_time
            
            if interaction["type"] == "shop":
                self.start_shop_interaction(interaction)
            elif interaction["type"] == "npc":
                self.start_npc_dialogue(interaction)
            elif interaction["type"] == "stairs":
                self.use_stairs(interaction)
            elif interaction["type"] == "item":
                self.collect_item(interaction)
        else:
            print("❌ 附近沒有可互動的物件")
            # 顯示附近的物件供除錯
            self.debug_nearby_objects(current_floor)
    
    def debug_nearby_objects(self, floor):
        """除錯：顯示附近的物件"""
        floor_data = self.map_manager.floor_data.get(floor, {})
        print(f"🔍 {floor}樓附近物件:")
        
        # 檢查商店
        for shop_id, shop in floor_data.get("shops", {}).items():
            distance = ((self.player.x - shop["pos"][0])**2 + (self.player.y - shop["pos"][1])**2)**0.5
            if distance < 100:  # 100像素內
                print(f"  🏪 {shop_id}: {shop['chinese_name']} - 距離 {distance:.1f}")
        
        # 檢查NPC
        for npc in floor_data.get("npcs", []):
            distance = ((self.player.x - npc["pos"][0])**2 + (self.player.y - npc["pos"][1])**2)**0.5
            if distance < 100:
                print(f"  👤 {npc['name']} - 距離 {distance:.1f}")
        
        # 檢查物品
        for item in floor_data.get("items", []):
            distance = ((self.player.x - item["pos"][0])**2 + (self.player.y - item["pos"][1])**2)**0.5
            if distance < 100:
                print(f"  📦 {item['item']['name']} - 距離 {distance:.1f}")
        
        # 檢查樓梯
        for stairs in floor_data.get("stairs", []):
            distance = ((self.player.x - stairs["pos"][0])**2 + (self.player.y - stairs["pos"][1])**2)**0.5
            if distance < 100:
                print(f"  🪜 樓梯({stairs['direction']}) - 距離 {distance:.1f}")
    
    def start_shop_interaction(self, shop_info):
        print(f"🏪 進入商店: {shop_info['name']}")
        
        # 檢查是否已經在對話中
        if self.game_state.current_state == "dialogue" or self.ui.dialogue_active:
            print("⚠️ 已經在對話中，忽略商店互動")
            return
            
        self.game_state.set_state("dialogue")
        self.ui.start_dialogue(shop_info)
    
    def start_npc_dialogue(self, npc_info):
        print(f"👤 與NPC對話: {npc_info['name']}")
        
        # 檢查是否已經在對話中
        if self.game_state.current_state == "dialogue" or self.ui.dialogue_active:
            print("⚠️ 已經在對話中，忽略NPC互動")
            return
            
        self.game_state.set_state("dialogue")
        self.ui.start_dialogue(npc_info)
    
    def use_stairs(self, stairs_info):
        print(f"🪜 使用樓梯: {stairs_info['direction']}")
        direction = stairs_info["direction"]
        current_floor = self.map_manager.current_floor
        
        if direction == "up":
            if current_floor == 1:
                # 1樓到2樓：自由通行
                self.map_manager.change_floor(2)
                self.player.set_position(400, 600)  # 樓梯底部
                print("⬆️ 上樓到 2 樓")
                self.ui.show_message("來到了二樓")
                
            elif current_floor == 2:
                # 2樓到3樓：需要鑰匙卡
                if self.game_state.get_flag("has_keycard") or self.inventory.has_item("鑰匙卡"):
                    self.map_manager.change_floor(3)
                    self.player.set_position(400, 600)
                    print("⬆️ 使用鑰匙卡上樓到 3 樓")
                    self.ui.show_message("🗝️ 使用鑰匙卡進入三樓！")
                    
                    # 設定標記
                    self.game_state.set_flag("unlocked_third_floor", True)
                else:
                    print("🚫 需要鑰匙卡才能上三樓")
                    self.ui.show_message("❌ 需要鑰匙卡才能進入三樓！")
                    
            else:
                print("🚫 已經在最高樓層")
                self.ui.show_message("已經是最高樓層了")
                
        elif direction == "down":
            if current_floor == 3:
                # 3樓到2樓
                self.map_manager.change_floor(2)
                self.player.set_position(400, 100)  # 樓梯頂部
                print("⬇️ 下樓到 2 樓")
                self.ui.show_message("回到了二樓")
                
            elif current_floor == 2:
                # 2樓到1樓
                self.map_manager.change_floor(1)
                self.player.set_position(400, 100)
                print("⬇️ 下樓到 1 樓")
                self.ui.show_message("回到了一樓")
                
            else:
                print("🚫 已經在最低樓層")
                self.ui.show_message("已經是最低樓層了")
    
    def collect_item(self, item_info):
        print(f"📦 收集物品: {item_info['item']['name']}")
        success = self.inventory.add_item(item_info["item"])
        if success:
            self.ui.show_message(f"獲得了 {item_info['item']['name']}")
            # 從地圖上移除物品
            self.map_manager.remove_item(item_info["item"])
            print(f"✅ 成功收集: {item_info['item']['name']}")
        else:
            self.ui.show_message("背包已滿！")
            print(f"❌ 背包已滿，無法收集: {item_info['item']['name']}")
    
    def update(self):
        if not self.show_intro:
            self.player.update()
            self.map_manager.update()
            
            # 檢查隨機遭遇
            if self.game_state.should_trigger_encounter():
                self.start_combat()
    
    def start_combat(self):
        self.game_state.current_state = "combat"
        enemy = self.game_state.get_random_enemy()
        self.combat_system.start_combat(enemy)
    
    def render(self):
        self.screen.fill((0, 0, 0))
        
        if self.show_intro:
            self.render_intro()
        else:
            # 渲染地圖
            self.map_manager.render(self.screen)
            
            # 渲染玩家
            self.player.render(self.screen)
            
            # 渲染UI
            self.ui.render(self.game_state, self.player, self.inventory)
        
        pygame.display.flip()
    
    def render_intro(self):
        intro_text = [
            "《末世第二餐廳》",
            "",
            "沒有人知道這一切是怎麼開始的。",
            "有一天，一種可怕的殭屍病毒突然席捲全球。",
            "只要被咬傷，感染者便會在三分鐘內失去理智...",
            "",
            "傳聞中，一群國立陽明交通大學的天才學生，",
            "憑著超凡的智慧，研發出了一種能夠治癒病毒的神秘藥劑。",
            "他們已將解藥藏於交大第二餐廳三樓的某個隱密角落...",
            "",
            "而你，作為同樣來自交大的普通學生，",
            "原本只是在便利商店買午餐，",
            "卻在殭屍攻進校園的瞬間被困其中。",
            "",
            "現在，全人類的命運，落在你手中。",
            "",
            "按 [空白鍵] 開始遊戲"
        ]
        
        y_offset = 50
        for line in intro_text:
            if line:
                text_surface = font_manager.render_text(line, 24, (255, 255, 255))
                text_rect = text_surface.get_rect(center=(self.SCREEN_WIDTH//2, y_offset))
                self.screen.blit(text_surface, text_rect)
            y_offset += 30
    
    def run(self):
        while self.running:
            self.handle_events()
            self.update()
            self.render()
            self.clock.tick(self.FPS)
        
        pygame.quit()
        sys.exit()

def main():
    """程式入口點"""
    try:
        print("🎮 啟動《末世第二餐廳》")
        game = Game()
        game.run()
    except KeyboardInterrupt:
        print("\n👋 遊戲被用戶中斷")
    except Exception as e:
        print(f"💥 遊戲發生錯誤: {e}")
        import traceback
        traceback.print_exc()
    finally:
        try:
            pygame.quit()
        except:
            pass

if __name__ == "__main__":
    main()